// Theme Generator - Creates CSS files from site settings
import fs from 'fs'
import path from 'path'

export interface SiteContent {
  primaryColor: string
  secondaryColor: string
  accentColor: string
  backgroundColor: string
  textColor: string
  fontFamily: string
  headingFont: string
  bodyFont: string
  fontSize: string
  lineHeight: string
  borderRadius: string
  shadowIntensity: string
}

export function generateThemeCSS(siteContent: SiteContent): string {
  const shadowValue = siteContent.shadowIntensity === 'none' ? 'none' : 
                     siteContent.shadowIntensity === 'subtle' ? '0 1px 3px rgba(0,0,0,0.1)' :
                     siteContent.shadowIntensity === 'medium' ? '0 4px 6px rgba(0,0,0,0.1)' :
                     '0 10px 15px rgba(0,0,0,0.1)'

  return `/* Custom Theme CSS - Generated by Site Editor */
/* Last updated: ${new Date().toISOString()} */

:root {
  /* Colors */
  --primary-color: ${siteContent.primaryColor};
  --secondary-color: ${siteContent.secondaryColor};
  --accent-color: ${siteContent.accentColor};
  --background-color: ${siteContent.backgroundColor};
  --text-color: ${siteContent.textColor};
  
  /* Typography */
  --font-family: ${siteContent.fontFamily}, sans-serif;
  --heading-font: ${siteContent.headingFont}, sans-serif;
  --body-font: ${siteContent.bodyFont}, sans-serif;
  --font-size: ${siteContent.fontSize};
  --line-height: ${siteContent.lineHeight};
  
  /* Visual effects */
  --border-radius: ${siteContent.borderRadius};
  --shadow-value: ${shadowValue};
}

/* Apply custom theme to your website elements */
body {
  font-family: var(--body-font);
  font-size: var(--font-size);
  line-height: var(--line-height);
  color: var(--text-color);
  background-color: var(--background-color);
}

h1, h2, h3, h4, h5, h6 {
  font-family: var(--heading-font);
  color: var(--text-color);
}

/* Primary button styles */
.btn-primary {
  background-color: var(--primary-color);
  color: white;
  border-radius: var(--border-radius);
  border: none;
  padding: 0.5rem 1rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
}

.btn-primary:hover {
  opacity: 0.9;
  transform: translateY(-1px);
}

/* Secondary button styles */
.btn-secondary {
  background-color: var(--secondary-color);
  color: white;
  border-radius: var(--border-radius);
  border: none;
  padding: 0.5rem 1rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
}

.btn-secondary:hover {
  opacity: 0.9;
  transform: translateY(-1px);
}

/* Accent button styles */
.btn-accent {
  background-color: var(--accent-color);
  color: white;
  border-radius: var(--border-radius);
  border: none;
  padding: 0.5rem 1rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
}

.btn-accent:hover {
  opacity: 0.9;
  transform: translateY(-1px);
}

/* Card styles */
.card {
  background-color: var(--background-color);
  border-radius: var(--border-radius);
  padding: 1.5rem;
  box-shadow: var(--shadow-value);
}

/* Header styles */
.header {
  background-color: var(--primary-color);
  color: white;
  padding: 1rem 0;
}

/* Link styles */
a {
  color: var(--primary-color);
  text-decoration: none;
}

a:hover {
  color: var(--secondary-color);
  text-decoration: underline;
}

/* Form input styles */
input, textarea, select {
  border-radius: var(--border-radius);
  border: 1px solid #d1d5db;
  padding: 0.5rem;
  font-family: var(--body-font);
  font-size: var(--font-size);
}

input:focus, textarea:focus, select:focus {
  outline: none;
  border-color: var(--primary-color);
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

/* Responsive design */
@media (max-width: 768px) {
  :root {
    --font-size: 14px;
  }
}

/* Dark mode support (if needed) */
@media (prefers-color-scheme: dark) {
  :root {
    --background-color: #1f2937;
    --text-color: #f9fafb;
  }
}`
}

export async function updateThemeFile(siteContent: SiteContent): Promise<void> {
  try {
    const cssContent = generateThemeCSS(siteContent)
    const filePath = path.join(process.cwd(), 'public', 'styles', 'custom-theme.css')
    
    // Ensure directory exists
    const dir = path.dirname(filePath)
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true })
    }
    
    // Write the CSS file
    fs.writeFileSync(filePath, cssContent, 'utf8')
    
    console.log('Theme CSS file updated successfully')
  } catch (error) {
    console.error('Error updating theme file:', error)
    throw error
  }
}

export function generateHTMLPage(pageData: { metaTitle?: string; title: string; metaDescription?: string; [key: string]: unknown }): string {
  return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${pageData.metaTitle || pageData.title}</title>
    <meta name="description" content="${pageData.metaDescription || ''}">
    <link rel="stylesheet" href="/styles/custom-theme.css">
    <style>
        body { margin: 0; padding: 0; }
        .container { max-width: 1200px; margin: 0 auto; padding: 2rem; }
        .content { line-height: 1.6; }
    </style>
</head>
<body>
    <div class="container">
        <div class="content">
            ${pageData.content}
        </div>
    </div>
</body>
</html>`
}
